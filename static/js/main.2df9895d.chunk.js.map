{"version":3,"sources":["ModelInfo.js","Sidebar.js","Group.js","Line.js","Constants.js","Canvas.js","Toolbar.js","ErrorBox.js","SelectModel.js","LinkPage.js","SetInput.js","Utils.js","Server.js","TrainSetup.js","Model.js","Data.js","App.js","index.js"],"names":["activationBoxHeight","activationBoxColor","nodeTypes","dense","name","type","svg","props","activationSVG","circles","Object","toConsumableArray","Array","map","_","i","react_default","a","createElement","cx","xSize","cy","key","r","fill","activation","Fragment","width","height","y","offsetX","offsetY","defaultParameters","units","canActivation","shapeOut","parameters","shapeIn","setError","concat","slice","length","conv","xInterval","yInterval","x","squareSize","filters","kernelSize","stride","batchSize","dimensions","kernel","isArray","mapped","dimension","Math","floor","input","data","datasetID","inputShape","modelInfo","Number","maxpool","poolSize","embedding","isNumber","dropout","color","len","rate","flatten","reduce","total","value","output","outputShape","relu","d","stroke","strokeWidth","sigmoid","tanh","softmax","layerNames","activationNames","blankModel","JSON","parse","convModel","denseModel","SidebarHeader","className","tabSelected","onClick","changeTab","CTAList","href","Button","disabled","children","Layer","newModel","Activation","newActivation","EditElements","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","propsOri","setActivation","bind","assertThisInitialized","selected","models","update","_this2","Collapsible_default","trigger","triggerTagName","id","triggerClassName","triggerOpenedClassName","onOpen","onClose","open","layersCollapsed","activationsCollapsed","React","Component","TrainElements","propOri","isTraining","trainingInfo","trainButton","cancelTrain","trainCloud","setSelectModelPage","getLink","downloadModel","setInput","ElementsContainer","propsExtracted","Elements","Sidebar_EditElements","Sidebar","_React$Component2","_this3","state","set","inherits","createClass","v","setState","tab","Group","_React$Component","onMouseDown","e","model","handleDrag","clientX","clientY","ID","transform","String","style","userSelect","MarkerDefs","viewBox","refX","refY","markerWidth","markerHeight","orient","Line","strokeDasharray","tentative","pointerEvents","midX","x1","x2","midY","y1","y2","markerStart","markerMid","markerEnd","BASE_URL","BASE","DATASET_SHAPE","MNIST","IMDB","modelCenter","Canvas","isNewline","xOffset","yOffset","selectedLineFromTo","dragging","initX","initY","initModelX","initModelY","handleElementClick","trackMouse","handleBGClick","handleLineClick","deleteSelection","onMouseUp","dim","ReactDOM","findDOMNode","getBoundingClientRect","document","addEventListener","removeEventListener","editableSelected","keyCode","cancelNewline","select","remove","from","to","connectedTo","newX","newY","dragged","abs","target","refs","canvas","startNewline","idFrom","idTo","modelElements","entries","_ref","_ref2","slicedToArray","Group_Group","tentativeLine","coords","lines","_ref3","_ref4","index","otherModel","otherCoords","onMouseMove","ref","Padding","CanvasContainer","Canvas_Canvas","DisplayLine","EditableLine","valueChanged","currentValue","onFocus","setEditableSelected","onChange","onBlur","callback","paraName","event","oldValue","DataInput","setInputDataset","Parameters","Toolbar_EditableLine","n","Toolbar","loss","toFixed","accuracy","testAccuracy","progress","updateModelInfo","trainSetup","status","incomingShape","outgoingShape","ErrorBox","errorMsg","dismissible","data-dismiss","aria-label","aria-hidden","SelectModel","err","link","noChange","loadModel","toggle","display","loadDefaultModel","placeholder","LinkPage","dummy","body","appendChild","execCommand","removeChild","readOnly","SetInput","inputShapeDisplay","outputShapeDisplay","onChangeShapeInput","onChangeShapeOutput","onChangeName","onBlurInput","onBlurOutput","components","split","num","parseInt","isNaN","shape","join","breakShape","toString","loadDefaultInput","loadInput","isCyclic","visited","inRecursionStack","_i","_Object$keys","keys","_i2","_Object$keys2","isCyclicHelper","next","isLinear","numIncomingEdges","_i3","_Object$keys3","_i4","_Object$keys4","ok","_i5","_Object$keys5","isTrainable","resp","currentNode","getModel","modelID","fetch","then","response","json","Error","Option","displayName","TrainSetup","step","learningRate","parseFloat","getElementById","min","optimizer","compileModel","layers","f","tf","inputLayer","conv1d","conv2d","maxPooling1d","maxPooling2d","getLayerF","para","stringify","inputDim","maxToken","outputDim","compileLayer","current_id","add","adam","sgd","rmsprop","getOptimizer","loss_fn","meanSquaredError","getLoss","compile","metrics","MnistData","_load","asyncToGenerator","regenerator_default","mark","_callee","img","ctx","imgRequest","labelsRequest","labelsResponse","wrap","_context","prev","Image","getContext","Promise","resolve","reject","crossOrigin","onload","naturalWidth","naturalHeight","datasetBytesBuffer","ArrayBuffer","NUM_DATASET_ELEMENTS","datasetBytesView","Float32Array","IMAGE_H","IMAGE_SIZE","drawImage","imageData","getImageData","j","datasetImages","src","all","sent","t0","Uint8Array","arrayBuffer","t1","datasetLabels","trainImages","testImages","trainLabels","NUM_CLASSES","testLabels","stop","apply","arguments","numTrainExapmles","xs","labels","numExamples","App","0","_model","1","epochs","nextID","errorOnce","currentEpoch","correct","batchesPerEpoch","selectModelPage","linkPage","settingInput","updateModel","selectModel","removeModel","startSession","endSession","updateTrain","_updateDependents","loadCustomInput","cloneDeep","random","inputNode","nextNode","oldModels","objectSpread","newModels","defineProperty","updateDependents","dict","canTuple","floatOkay","undefined","once","t","load","_data$getTrainData","getTrainData","_data$getTrainData2","ys","fit","callbacks","onBatchEnd","batch","logs","onTrainEnd","validationSplit","acc","stopTraining","_data$getTestData","getTestData","_data$getTestData2","evaluate","as1D","dataSync","getIDFromLink","modelJSON","decoded","max","catch","message","_this4","serializedModel","method","headers","Accept","Content-Type","saveModel","responseJSON","_downloadModel","abrupt","save","url","_this5","datasetName","console","log","_this6","LinkPage_LinkPage","SelectModel_SelectModel","SetInput_SetInput","TrainSetup_TrainSetup","ErrorBox_ErrorBox","Sidebar_Sidebar","Toolbar_Toolbar","updateParameters","render","src_App_0"],"mappings":"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","file":"static/js/main.2df9895d.chunk.js","sourcesContent":["import React from 'react';\nimport { isArray, isNumber } from 'util';\n\n// mega fuckton of constants to describe the svg\n// shapes of things\n\n\n// describe layers' and activation function's svg representation\nconst activationBoxHeight = 20;\nconst activationBoxColor = \"#cccccc\";\n\nfunction conv(props) {\n  // svg for a conv layer\n  const squareSize = 40;\n  const xInterval = squareSize / 4;\n  const yInterval = squareSize / 4;\n\n  const firstColor = \"#2775f4\";\n  const secondColor = \"#4286f4\";\n  const thirdColor = \"#5c98f9\";\n  let activationSVG;\n  if (props.activation != null) {\n    activationSVG = nodeTypes[props.activation].svg(xInterval*2+squareSize/2, yInterval*2+squareSize+activationBoxHeight/2+3);\n  } else {\n    activationSVG = null\n  }\n  return <React.Fragment>\n    <rect width={squareSize} height={squareSize} fill={firstColor}/>\n    <rect x={xInterval} y={yInterval} width={squareSize} height={squareSize} fill={secondColor}/>\n    <rect x={xInterval*2} y={yInterval*2} width={squareSize} height={squareSize} fill={thirdColor}/>\n    <rect x={xInterval*2} y={yInterval*2+squareSize} width={squareSize} height={activationBoxHeight} fill={activationBoxColor}/>\n    {activationSVG}\n  </React.Fragment>\n}\n\nfunction dense(props) {\n  // svg for a dense layer\n  const xSize = 40;\n  const ySize = 80;\n  const numCircles = 3;\n  const squareColor = \"#665cf9\";\n  \n  const circleColor = \"#83a5f7\";\n\n  const circles = [...Array(numCircles)].map((_, i) =>\n    <circle cx={xSize / 2} \n            cy={(ySize-8) / numCircles * (i+0.5)+4} \n            key={i}\n            r={ySize / numCircles / 2 - 4}\n            fill={circleColor}>\n            \n            </circle>\n  );\n  let activationSVG;\n  if (props.activation != null) {\n    activationSVG = nodeTypes[props.activation].svg(xSize/2, ySize+activationBoxHeight/2+3);\n  } else {\n    activationSVG = null\n  }\n  return <React.Fragment>\n    <rect width={xSize} height={ySize} fill={squareColor}/>\n    <rect width={xSize} y={ySize} height={activationBoxHeight} fill={activationBoxColor}/>\n    {circles}\n    {activationSVG}\n  </React.Fragment>\n}\n\nfunction input(props) {\n  // svg for an input layer\n  const size = 30\n  const color = \"#99ccff\";\n  return <React.Fragment>\n    <rect width={size} height={size} fill={color}/>\n  </React.Fragment>\n}\n\nfunction output(props) {\n  // svg for an output layer\n  const color = \"#008066\";\n  const width = 30;\n  const height = 60;\n\n  let activationSVG;\n  if (props.activation != null) {\n    activationSVG = nodeTypes[props.activation].svg(width/2, height+activationBoxHeight/2+3);\n  } else {\n    activationSVG = null\n  }\n\n  return <React.Fragment>\n    <rect width={width} height={height} fill={color}></rect>\n    <rect width={width} y={height} height={activationBoxHeight} fill={activationBoxColor}></rect>\n    {activationSVG}\n  </React.Fragment>\n}\n\nfunction maxpool(props) {\n  // svg for a maxpool layer\n  const squareSize = 30;\n  const xInterval = squareSize / 4;\n  const yInterval = squareSize / 4;\n\n  const firstColor = \"#be41f4\";\n  const secondColor = \"#e541f4\";\n  const thirdColor = \"#f95cf9\";\n\n  return <React.Fragment>\n    <rect width={squareSize} height={squareSize} fill={firstColor}/>\n    <rect x={xInterval} y={yInterval} width={squareSize} height={squareSize} fill={secondColor}/>\n    <rect x={xInterval*2} y={yInterval*2} width={squareSize} height={squareSize} fill={thirdColor}/>\n  </React.Fragment>\n}\n\nfunction embedding(props) {\n  // svg for an embedding layer\n  const width = 20;\n  const height = 15;\n  const firstColor = \"#6a41f4\";\n  const secondColor = \"#8a61ff\";\n  const thirdColor = \"#7a51f5\";\n  return <React.Fragment>\n    <rect width={width*3} height={height} fill={firstColor}></rect>\n    <rect width={width*1.5} height={height} y={height} fill={secondColor}></rect>\n    <rect width={width*2.5} height={height} y={height*2} fill={thirdColor}></rect>\n  </React.Fragment>\n}\n\nfunction dropout(props) {\n  // svg for a dropout layer\n  const len = 10;\n  const color = \"#404040\";\n  return <React.Fragment>\n    <rect width={len} height={len} x={len*0} y={len*0} fill={color}></rect>\n    <rect width={len} height={len} x={len*2} y={len*0} fill={color}></rect>\n    <rect width={len} height={len} x={len*3} y={len*0} fill={color}></rect>\n    <rect width={len} height={len} x={len*1} y={len*1} fill={color}></rect>\n    <rect width={len} height={len} x={len*2} y={len*1} fill={color}></rect>\n    <rect width={len} height={len} x={len*0} y={len*2} fill={color}></rect>\n    <rect width={len} height={len} x={len*2} y={len*2} fill={color}></rect>\n    <rect width={len} height={len} x={len*3} y={len*2} fill={color}></rect>\n    <rect width={len} height={len} x={len*1} y={len*3} fill={color}></rect>\n    <rect width={len} height={len} x={len*2} y={len*3} fill={color}></rect>\n    <rect width={len} height={len} x={len*3} y={len*3} fill={color}></rect>\n  </React.Fragment>\n}\n\nfunction flatten(props) {\n  // svg for a flatten layer\n  const width = 16;\n  const height = 120;\n  const color = \"#404040\";\n  return <React.Fragment>\n    <rect width={width} height={height} fill={color}></rect>\n  </React.Fragment>\n}\n\nfunction relu(x, y) {\n  // svg for a relu function\n  const width = 12;\n  const height = 8;\n  return <React.Fragment>\n    <path d={\"M\"+(x-width)+\" \"+y+\"l\"+width+ \" 0 l\" + width + \" -\" + height} stroke=\"black\" strokeWidth=\"2\" fill=\"none\"/>\n  </React.Fragment>\n}\n\nfunction sigmoid(x, y) {\n  // svg for a sigmoid function\n  const width = 12;\n  const height = 4;\n  return (\n    <path d={\"M \"+(x-width)+\" \"+y+\" q \"+(width-1)+ \" 0 \" + width + \" \" + (-height) + \" q 1 \" + (-height) + \" \" + width + \" \" + (-height)} stroke=\"black\" strokeWidth=\"2\" fill=\"none\"/>\n  )\n}\n\nfunction softmax(x, y) {\n  // svg for a softmax function\n  const width = 24;\n  const height = 8;\n  return (\n    <path d={\"M \"+(x-width/2)+\" \"+y+\" q \"+(width-1)+ \" 0 \" + width + \" \" + (-height)} stroke=\"black\" strokeWidth=\"2\" fill=\"none\"/>\n  )\n}\n\nfunction tanh(x, y) {\n  // svg for a tanh function\n  const width = 12;\n  const height = 4;\n  return (\n    <path d={\"M \"+(x-width)+\" \"+y+\" q \"+(width-5)+ \" 0 \" + width + \" \" + (-height) + \" q 5 \" + (-height) + \" \" + width + \" \" + (-height)} stroke=\"black\" strokeWidth=\"2\" fill=\"none\"/>\n  )\n}\n\n// this is a mapping from node type (layer or activation)\n// to its relevant constant information\n\n// name is its display name\n// type can be layer or activation\n// svg is its corresponding svg to be rendered\n// defaultParameters include its default parameters\n// canActivation indicates whether a layer can have an activation function\n// shapeOut is a functio nto calculate its output shape given its parameter and input shape\n\n// offsetX and offsetY for finding the center of the svg (from its corner)\n\nexport const nodeTypes = {\n    \"dense\": {\n        name: \"Dense\",\n        type: \"layer\",\n        svg: dense,\n        offsetX: 20, // offsets are for giving a point of contact for lines\n        offsetY: 50, \n        defaultParameters: {\n          units: 16,\n        },\n        canActivation: true,\n        // the function to compute the output shape given input shape and parameters\n        shapeOut: (parameters, shapeIn, setError) => {\n          if (shapeIn === null) {\n            return null;\n          }\n          return [...shapeIn.slice(0,shapeIn.length-1), parameters[\"units\"]];\n        },\n    },\n    \"conv\": {\n        name: \"Conv\",\n        type: \"layer\",\n        svg: conv,\n        offsetX: 40,\n        offsetY: 40,\n        defaultParameters: {\n          filters: 8,\n          kernelSize: [3,3], // could be both tuple or int. ndim needs to match with stride\n          stride: 1, // could be both tuple or int\n        },\n        canActivation: true,\n        shapeOut: (parameters, shapeIn, setError) => {\n          if (shapeIn === null) {\n            return null;\n          }\n          const batchSize = shapeIn[0];\n          const dimensions = shapeIn.slice(1, shapeIn.length-1);\n          const kernel = isArray(parameters[\"kernelSize\"]) ? parameters[\"kernelSize\"] : [parameters[\"kernelSize\"]];\n          \n          const stride = (typeof(parameters[\"stride\"]) === \"number\") ? Array(kernel.length).fill(parameters['stride']) : parameters[\"stride\"];\n          const filters = parameters[\"filters\"];\n          if (dimensions.length !== kernel.length) {\n            setError(\"Kernel must have the same ndim as the input dimension (without batchSize)\", false);\n            return null;\n          }\n          const mapped = dimensions.map((dimension, key) => {\n            return Math.floor((dimension - kernel[key])/stride[key])+1;\n          });\n          return [batchSize, ...mapped, filters];\n        },\n    },\n    \"input\": {\n      name: \"Input\",\n      type: \"layer\",\n      svg: input,\n      offsetX: 15,\n      offsetY: 15,\n      defaultParameters: {\n        data: \"MNIST\",\n        datasetID: \"\",\n        inputShape: [28, 28, 1],\n      },\n      canActivation: false,\n      shapeOut: (parameters, modelInfo, setError) => {\n        if (parameters['inputShape'] === null) {\n          return null;\n        }\n        if (isArray(parameters['inputShape'])) {\n          return [Number(modelInfo[\"batchSize\"]), ...parameters['inputShape']];\n        }\n        return [Number(modelInfo[\"batchSize\"]), parameters['inputShape']];\n      },\n    },\n    \"maxpool\": {\n      name: \"Max Pool\",\n      type: \"layer\",\n      svg: maxpool,\n      offsetX: 30,\n      offsetY: 30,\n      defaultParameters: {\n        poolSize: [2,2], // the length is dimensionality; can be between 1 to 3\n      },\n      canActivation: false,\n      shapeOut: (parameters, shapeIn, setError) => {\n        if (shapeIn === null) {\n          return null;\n        }\n        const batchSize = shapeIn[0];\n        const dimensions = shapeIn.slice(1,shapeIn.length-1);\n        const filters = shapeIn[shapeIn.length-1];\n        const poolSize = (typeof(parameters[\"poolSize\"]) === \"number\") ? [parameters[\"poolSize\"]] : parameters[\"poolSize\"];\n        \n        if (dimensions.length !== poolSize.length) {\n          setError(\"PoolSize must have the same ndim as the input dimension (without batchSize)\", false);\n          return null;\n        }\n        const mapped = dimensions.map((dimension, key) => {\n          return Math.floor((dimension)/poolSize[key]);\n        });\n        return [batchSize, ...mapped, filters];\n      }\n    },\n    \"embedding\": {\n      name: \"Embedding\",\n      type: \"layer\",\n      svg: embedding,\n      offsetX: 25,\n      offsetY: 20,\n      defaultParameters: {\n        units: 100,\n      },\n      canActivation: false,\n      shapeOut: (parameters, shapeIn, setError) => {\n        if (shapeIn === null) {\n          return null;\n        }\n        if (isNumber(shapeIn) || shapeIn.length !== 2) {\n          setError(\"Embedding input shape must be (batchSize, sequenceLength)\", false);\n          return null;\n        }\n        return [shapeIn[0], shapeIn[1], parameters['units']];\n      },\n    },\n    \"dropout\": {\n      name: \"Dropout\",\n      type: \"layer\",\n      svg: dropout,\n      offsetX: 20,\n      offsetY: 20,\n      defaultParameters: {\n        rate: 0.25,\n      },\n      canActivation: false,\n      shapeOut: (parameters, shapeIn, setError) => {\n        if (shapeIn === null) {\n          return null;\n        }\n        return shapeIn;\n      }\n    },\n    \"flatten\": {\n      name: \"Flatten\",\n      type: \"layer\",\n      svg: flatten,\n      offsetX: 8,\n      offsetY: 60,\n      defaultParameters: {},\n      canActivation: false,\n      shapeOut: (parameters, shapeIn, setError) => {\n        if (shapeIn === null) {\n          return null;\n        }\n        if (isNumber(shapeIn) || shapeIn.length <= 2) {\n          setError(\"Flatten input shape must be (batchSize, ...shape) (ndim > 2)\", false);\n          return null;\n        }\n        return [shapeIn[0], shapeIn.slice(1).reduce((total, value) => total*value)];\n      }\n    },\n    \"output\": {\n      name: \"Output\",\n      type: \"layer\",\n      svg: output,\n      offsetX: 10,\n      offsetY: 40,\n      defaultParameters: {\n        data: \"MNIST\",\n        outputShape: [10],\n      },\n      canActivation: true,\n      shapeOut: (parameters, shapeIn, setError) => {\n        if (shapeIn === null) {\n          return null;\n        }\n        if (isNumber(shapeIn) || shapeIn.length !== 2) {\n          setError(\"Output layer must have input layer of shape (batchSize, dim)\", false);\n        }\n        if (isArray(parameters['outputShape'])) {\n          return [...shapeIn.slice(0,shapeIn.length-1), ...parameters['outputShape']];\n        } else {\n          return [...shapeIn.slice(0,shapeIn.length-1), parameters['outputShape']];\n        }\n        \n      },\n    },\n    \"relu\": {\n      name: \"ReLU\",\n      type: \"activation\",\n      svg: relu,\n      defaultParameters: {}\n    },\n    \"sigmoid\": {\n      name: \"Sigmoid\",\n      type: \"activation\",\n      svg: sigmoid,\n      defaultParameters: {}\n    },\n    \"tanh\": {\n      name: \"Tanh\",\n      type: \"activation\",\n      svg: tanh,\n      defaultParameters: {}\n    },\n    \"softmax\": {\n      name: \"SoftMax\",\n      type: \"activation\",\n      svg: softmax,\n      defaultParameters: {}\n    }\n};\n\n// some more constants\nexport const layerNames = [\"dense\", \"conv\", \"maxpool\", \"flatten\", \"embedding\", \"dropout\"];\nexport const activationNames = [\"relu\", \"sigmoid\", \"softmax\", \"tanh\"];\n\n// preset models\n\nexport const blankModel = JSON.parse('{\"model\":{\"0\":{\"name\":\"input0\",\"ID\":0,\"type\":\"input\",\"x\":20,\"y\":50,\"connectedTo\":null,\"shapeIn\":[25,28,28,1],\"shapeOut\":[25,28,28,1],\"activation\":null,\"parameters\":{\"data\":\"MNIST\",\"datasetID\":\"\",\"inputShape\":[28,28,1]}},\"1\":{\"name\":\"output1\",\"ID\":1,\"type\":\"output\",\"x\":300,\"y\":50,\"connectedTo\":null,\"shapeIn\":null,\"shapeOut\":null,\"activation\":null,\"parameters\":{\"data\":\"MNIST\",\"outputShape\":[10]}}},\"modelInfo\":{\"epochs\":\"2\",\"batchSize\":\"25\",\"maxToken\":null,\"loss\":\"cce\",\"optimizer\":\"adam\",\"learningRate\":\"0.01\"}}');\n\nexport const convModel = JSON.parse(\"{\\\"model\\\":{\\\"0\\\":{\\\"name\\\":\\\"input0\\\",\\\"ID\\\":0,\\\"type\\\":\\\"input\\\",\\\"x\\\":20,\\\"y\\\":50,\\\"connectedTo\\\":4,\\\"shapeIn\\\":[25,28,28,1],\\\"shapeOut\\\":[25,28,28,1],\\\"activation\\\":null,\\\"parameters\\\":{\\\"data\\\":\\\"MNIST\\\",\\\"datasetID\\\":\\\"\\\",\\\"inputShape\\\":[28,28,1]}},\\\"1\\\":{\\\"name\\\":\\\"output1\\\",\\\"ID\\\":1,\\\"type\\\":\\\"output\\\",\\\"x\\\":300,\\\"y\\\":50,\\\"connectedTo\\\":null,\\\"shapeIn\\\":[25,288],\\\"shapeOut\\\":[25,10],\\\"activation\\\":\\\"softmax\\\",\\\"parameters\\\":{\\\"data\\\":\\\"MNIST\\\",\\\"outputShape\\\":[10]}},\\\"4\\\":{\\\"name\\\":\\\"conv4\\\",\\\"ID\\\":4,\\\"type\\\":\\\"conv\\\",\\\"x\\\":93.22129625745828,\\\"y\\\":45.02453806961887,\\\"connectedTo\\\":5,\\\"shapeIn\\\":[25,28,28,1],\\\"shapeOut\\\":[25,13,13,8],\\\"activation\\\":\\\"relu\\\",\\\"parameters\\\":{\\\"filters\\\":8,\\\"kernelSize\\\":[3,3],\\\"stride\\\":2}},\\\"5\\\":{\\\"name\\\":\\\"maxpool5\\\",\\\"ID\\\":5,\\\"type\\\":\\\"maxpool\\\",\\\"x\\\":164.94433122077317,\\\"y\\\":50.04710123987789,\\\"connectedTo\\\":6,\\\"shapeIn\\\":[25,13,13,8],\\\"shapeOut\\\":[25,6,6,8],\\\"activation\\\":null,\\\"parameters\\\":{\\\"poolSize\\\":[2,2]}},\\\"6\\\":{\\\"name\\\":\\\"flatten6\\\",\\\"ID\\\":6,\\\"type\\\":\\\"flatten\\\",\\\"x\\\":227.27825598586503,\\\"y\\\":17.505554649411522,\\\"connectedTo\\\":1,\\\"shapeIn\\\":[25,6,6,8],\\\"shapeOut\\\":[25,288],\\\"activation\\\":null,\\\"parameters\\\":{}}},\\\"modelInfo\\\":{\\\"epochs\\\":\\\"2\\\",\\\"batchSize\\\":\\\"25\\\",\\\"maxToken\\\":null,\\\"loss\\\":\\\"cce\\\",\\\"optimizer\\\":\\\"adam\\\",\\\"learningRate\\\":\\\"0.01\\\"}}\");\n\nexport const denseModel = JSON.parse(\"{\\\"model\\\":{\\\"0\\\":{\\\"name\\\":\\\"input0\\\",\\\"ID\\\":0,\\\"type\\\":\\\"input\\\",\\\"x\\\":18,\\\"y\\\":50,\\\"connectedTo\\\":5,\\\"shapeIn\\\":[25,28,28,1],\\\"shapeOut\\\":[25,28,28,1],\\\"activation\\\":null,\\\"parameters\\\":{\\\"data\\\":\\\"MNIST\\\",\\\"datasetID\\\":\\\"\\\",\\\"inputShape\\\":[28,28,1]}},\\\"1\\\":{\\\"name\\\":\\\"output1\\\",\\\"ID\\\":1,\\\"type\\\":\\\"output\\\",\\\"x\\\":288,\\\"y\\\":50,\\\"connectedTo\\\":null,\\\"shapeIn\\\":[25,128],\\\"shapeOut\\\":[25,10],\\\"activation\\\":\\\"softmax\\\",\\\"parameters\\\":{\\\"data\\\":\\\"MNIST\\\",\\\"outputShape\\\":[10]}},\\\"3\\\":{\\\"name\\\":\\\"flatten3\\\",\\\"ID\\\":3,\\\"type\\\":\\\"flatten\\\",\\\"x\\\":153.95333629131653,\\\"y\\\":24.011553705551506,\\\"connectedTo\\\":4,\\\"shapeIn\\\":[25,28,28,16],\\\"shapeOut\\\":[25,12544],\\\"activation\\\":null,\\\"parameters\\\":{}},\\\"4\\\":{\\\"name\\\":\\\"dense4\\\",\\\"ID\\\":4,\\\"type\\\":\\\"dense\\\",\\\"x\\\":207.20185248114421,\\\"y\\\":39.051709968596924,\\\"connectedTo\\\":1,\\\"shapeIn\\\":[25,12544],\\\"shapeOut\\\":[25,128],\\\"activation\\\":\\\"relu\\\",\\\"parameters\\\":{\\\"units\\\":128}},\\\"5\\\":{\\\"name\\\":\\\"dense5\\\",\\\"ID\\\":5,\\\"type\\\":\\\"dense\\\",\\\"x\\\":65.63926455425138,\\\"y\\\":26.941127293205966,\\\"connectedTo\\\":3,\\\"shapeIn\\\":[25,28,28,1],\\\"shapeOut\\\":[25,28,28,16],\\\"activation\\\":\\\"relu\\\",\\\"parameters\\\":{\\\"units\\\":16}}},\\\"modelInfo\\\":{\\\"epochs\\\":\\\"2\\\",\\\"batchSize\\\":\\\"25\\\",\\\"maxToken\\\":1000,\\\"loss\\\":\\\"cce\\\",\\\"optimizer\\\":\\\"sgd\\\",\\\"learningRate\\\":\\\"0.01\\\"}}\");","import React from 'react';\nimport Collapsible from 'react-collapsible';\nimport \"./Sidebar.css\";\nimport {nodeTypes, layerNames, activationNames} from \"./ModelInfo.js\";\n\nfunction SidebarHeader(props) {\n  /* the header (top left corner) of the sidebar */\n  const selectedClassName = \"btn btn-dark btn-block\";\n  const unselectedClassName = \"btn btn-outline-dark btn-block\";\n  return (\n    <div className=\"sidebar-header\">\n        <button type=\"button\" \n                className={props.tabSelected === \"edit\" ? selectedClassName : unselectedClassName }\n                onClick={() => props.changeTab(\"edit\")}>\n                Edit\n        </button>\n        <button type=\"button\" \n                className={props.tabSelected === \"train\" ? selectedClassName : unselectedClassName}\n                onClick={() => props.changeTab(\"train\")}>\n                Train\n        </button>\n    </div>\n  )\n}\n\nfunction CTAList() {\n  /* the credits on the bottom left corner */\n  return (\n    <ul className=\"list-unstyled CTAs\">\n      <li>\n        <a href=\"https://www.github.com/alexding123/NN-Flowchart\" className=\"download\">Download source</a>\n      </li>\n    </ul>\n  )\n}\n\nfunction Button(props) {\n  /* a button to be displayed on the sidebar */\n  return (\n    <div className=\"p-2 align-self-stretch button-container\">\n      <button className=\"btn btn-sm btn-dark btn-block\" onClick={props.onClick} disabled={props.disabled}>\n        {props.children}\n      </button>\n    </div>\n  );\n}\n\nfunction Layer(props) {\n  /* returns a button to create a layer */\n  return (\n    <Button onClick={() => props.newModel(props.name)}>\n      {nodeTypes[props.name].name}\n    </Button>\n  )\n}\n\nfunction Activation(props) {\n  /* returns a button to append an activation */\n  return (\n    <Button onClick={() => props.newActivation(props.name)}>\n      {nodeTypes[props.name].name}\n    </Button>\n  );\n}\n\nclass EditElements extends React.Component {\n  /* the sidebar when it's under the edit bar */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.propsOri = props.propsOri;\n    this.setActivation = this.setActivation.bind(this);\n  }\n\n  setActivation(name) {\n    /* set the selected model to a particular activation function */\n    // must have a layer selected\n    if (this.props.selected === -1) {\n      this.props.setError(\"Select a layer to add the activation to first!\", true);\n      return;\n    }\n    const selected = this.props.models[this.props.selected];\n\n    // cancel activation if model is not activation-capatible\n    if (!nodeTypes[selected.type].canActivation) {\n      return;\n    }\n    // cancel the existing activation if it's the same as this\n    if (selected.activation === name) {\n      this.props.update(this.props.selected, {\n        activation: null,\n      });\n    } else {\n      this.props.update(this.props.selected, {\n        activation: name,\n      });\n    }\n  }\n  \n  render() {\n    const triggerName = \"trigger\";\n    const triggerOpenName = \"trigger active\";\n    return <React.Fragment>\n      <Collapsible trigger=\"Layers\" triggerTagName=\"p\" id=\"layers-toggle\" triggerClassName={triggerName} triggerOpenedClassName={triggerOpenName} onOpen={() => this.propsOri.update(\"layers\", false)} onClose={() => this.propsOri.update(\"layers\", true)} open={!this.propsOri.layersCollapsed}>\n        <div className=\"d-flex flex-column\">\n        { layerNames.map((name) => \n          <Layer key={name}\n            name={name}\n            newModel={this.props.newModel}\n          />)\n        }\n        </div>\n      </Collapsible>\n      <Collapsible trigger=\"Activations\" triggerTagName=\"p\" triggerClassName={triggerName} triggerOpenedClassName={triggerOpenName} onOpen={() => this.propsOri.update(\"activations\", false)} onClose={() => this.propsOri.update(\"activations\", true)} open={!this.propsOri.activationsCollapsed}>\n      <div className=\"d-flex flex-column\">\n      { activationNames.map((name) => \n        <Activation key={name} \n          name={name} \n          newActivation={() => this.setActivation(name)}\n        />\n        )\n      }\n      </div>\n      </Collapsible>\n    </React.Fragment>\n  }\n}\n\nfunction TrainElements(propOri) {\n  /* the display of the sidebar when it is under the train tab */\n  const props = propOri.props;\n  const isTraining = props.trainingInfo[\"status\"] !== \"Edit\";\n\n  // train if not training, cancel button if training\n  const trainButton = (!isTraining) ? \n                 <Button onClick={props.trainCloud}>Train on Cloud</Button> : \n                 <Button onClick={props.cancelTrain}>Cancel</Button>;\n  return (\n    <React.Fragment>\n      <p>Server</p>\n      <Button onClick={props.setSelectModelPage} disabled={isTraining}>New/Load</Button>\n      <Button onClick={props.getLink}>Generate Link</Button>\n      \n      <p>Model</p>\n      {trainButton}\n      <Button onClick={props.downloadModel}>Download Model</Button>\n\n      <p>Input</p>\n      <Button onClick={props.setInput}>Set Input</Button>\n      \n    </React.Fragment>\n  )\n}\n\nfunction ElementsContainer(props) {\n  /* the container of a list of buttons */\n  const propsExtracted = props.props;\n  const Elements = props.tabSelected === \"edit\" ? <EditElements propsOri={props} models={propsExtracted.models} selected={propsExtracted.selected} setError={propsExtracted.setError} newModel={propsExtracted.newModel} update={propsExtracted.update}/>: <TrainElements props={propsExtracted}/>;\n  return (\n    <ul className=\"list-unstyled components\">\n      {Elements}\n    </ul>\n  )\n}\n\nexport class Sidebar extends React.Component {\n  /* the master sidebar to the left */\n  constructor(props) {\n    super(props);\n    this.props = props\n    this.state = {\n      tabSelected: \"edit\", // which tab is selected\n      layersCollapsed: false, // whether the accordion tab is collapsed\n      activationsCollapsed: false,\n    };\n    this.changeTab = this.changeTab.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  set(name, v) {\n    /* set whether the tab is collapsed */\n    if (name === \"layers\") {\n      this.setState({layersCollapsed: v});\n    } else if (name === \"activations\") {\n      this.setState({activationsCollapsed: v});\n    }\n  }\n\n  changeTab(tab) {\n    /* updates the current tab selected */\n    this.setState({\n      tabSelected: tab\n    })\n  }\n\n  render() {\n    return (\n      <nav className=\"p-2 h-100\" id=\"sidebar\">\n        <SidebarHeader tabSelected={this.state.tabSelected} changeTab={this.changeTab} />\n        <ElementsContainer tabSelected={this.state.tabSelected} layersCollapsed={this.state.layersCollapsed} activationsCollapsed={this.state.activationsCollapsed} update={this.set} props={this.props}/>\n        <CTAList />\n      \n      </nav>\n    )\n  }\n  \n}","import React from 'react';\nimport {nodeTypes} from \"./ModelInfo.js\";\n\nexport class Group extends React.Component {\n  /* a class for one single model's svg */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onMouseDown = this.onMouseDown.bind(this);\n  }\n  \n  \n  onMouseDown(e) {\n    /* start a drag-n-drop when clicked */\n    const model = this.props.model;\n    this.props.handleDrag(e.clientX, e.clientY, model.ID);\n  }\n  \n  \n  render() {\n    const model = this.props.model;\n\n    return (\n      <g className={this.props.selected ? \"selected\" : \"\"}\n        onMouseDown={this.onMouseDown}\n        key={model.ID} \n        transform={\"translate(\" + String(model.x) + \",\" + String(model.y) + \")\"}\n        style={{userSelect: 'none'}} // to prevent selecting\n      >\n      {nodeTypes[model.type].svg(model)}\n      </g>\n    )\n  }\n  \n}","import React from 'react';\n\nexport function MarkerDefs(props) {\n  /* defines the marker for the lines drawn in the svg */\n  // arrowed line\n  return (\n    <defs>\n      <marker id=\"dot\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\"\n        markerWidth=\"5\" markerHeight=\"5\">\n        <circle cx=\"5\" cy=\"5\" r=\"3\" fill=\"black\" />\n      </marker>\n      <marker id=\"arrow\" markerWidth=\"4\" markerHeight=\"4\"\n      orient=\"auto\" refY=\"2\">\n        <path d=\"M0,0 L4,2 0,4\"/>\n      </marker>\n    </defs>\n  )\n  }\n  \nexport function Line(props) {\n  /* defines an actual svg line, with arrows and dotted\n   * if selected\n   */\n    const strokeDasharray = props.tentative ? \"5,5\" : null;\n    const className = props.selected ? \"selected\" : null;\n    const onClick = props.tentative ? null : props.onClick;\n    let pointerEvents = props.tentative ? \"none\" : null;\n    if (\"pointerEvents\" in props) {\n      pointerEvents = props.pointerEvents;\n    }\n    const midX = (props.x1+props.x2) / 2;\n    const midY = (props.y1+props.y2) / 2;\n    return (\n    <path d={\"M \"+props.x1+\" \"+props.y1+\n             \" L \"+midX+\" \"+midY+\n             \" L \"+props.x2+\" \"+props.y2}\n          onClick={onClick}\n          className={className}\n          pointerEvents={pointerEvents}\n          strokeDasharray={strokeDasharray} \n          stroke=\"black\" \n          strokeWidth=\"3\"\n          markerStart=\"url(#arrow)\"\n          markerMid=\"url(#arrow)\"\n          markerEnd=\"url(#dot)\"/>\n    );\n  }\n  ","export const DELETE_KEY = 8; // keycode\nexport const BASE = \"https://nn-flowchart.herokuapp.com/\";\nexport const BASE_URL = BASE + \"api/\"; \n\nexport const DATASET_SHAPE = {\n    \"MNIST\": {\n        \"input\": [28, 28, 1],\n        \"output\": [10],\n    },\n    \"IMDB\": {\n        \"input\": [500],\n        \"output\": [2],\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Canvas.css\";\nimport {nodeTypes} from \"./ModelInfo.js\";\nimport {Group} from \"./Group.js\";\nimport {MarkerDefs, Line} from \"./Line.js\";\nimport {DELETE_KEY} from \"./Constants.js\";\n\n\nfunction modelCenter(model) {\n  /* get coordinates for the point on a model to connect to\n   */\n  const offsetX = nodeTypes[model.type].offsetX\n  const offsetY = nodeTypes[model.type].offsetY\n  return {x: model.x+offsetX, y: model.y+offsetY}\n}\n\nclass Canvas extends React.Component {\n  /* the class implementing the actual svg and all the event\n   * listerers (along with its downstream elements)\n   * stores the mouse locations and such information to implement\n   * drag and drop\n   */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    \n    this.state = {\n      isNewline: false, // is there a new line being constructed?\n      xOffset: 0, // offset of the svg's x from clientX\n      yOffset: 0, // ibid for y\n      x: 0, // x of the mouse relative to the svg\n      y: 0, // ibid for y\n      id: -1, // id of the line from which the current new line stems from\n      selectedLineFromTo: [-1,-1], // selected line from node X to node Y ([X,Y])\n      dragging: -1, // -1 means no dragging\n      initX: 0,\n      initY: 0,\n      initModelX: 0,\n      initModelY: 0,\n    }\n\n    // some function bindings\n    this.handleElementClick = this.handleElementClick.bind(this);\n    this.trackMouse = this.trackMouse.bind(this);\n    this.handleBGClick = this.handleBGClick.bind(this);\n    this.handleLineClick = this.handleLineClick.bind(this);\n    this.deleteSelection = this.deleteSelection.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n  }\n\n  componentDidMount() {\n    // finds out the offsets of the svg\n    const dim = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    this.setState({\n      xOffset: dim.x,\n      yOffset: dim.y,\n    });\n\n    // setup key listener for deletion\n    document.addEventListener(\"keydown\", this.deleteSelection);\n  }\n\n  componentWillUnmount() {\n    // reset\n    document.removeEventListener(\"keydown\", this.deleteSelection);\n  }\n\n  deleteSelection(e) {\n    /* delete the selected model */\n    // ignore delete if editing a parameter\n    if (this.props.editableSelected) {\n      return;\n    }\n    if (e.keyCode === DELETE_KEY) {\n      // prioritize items over line\n      // if an item is selected\n      if (this.props.selected !== -1) {\n        // first cancel a few things just in case (to prevent errors)\n        this.cancelNewline();\n        const selected = this.props.selected;\n        \n        // cannot delete input or output node\n        if (selected === 0 || selected === 1) {\n          return;\n        }\n        this.props.select(-1);\n\n        this.props.remove(selected);\n        return;\n      }\n\n      // delete selected line\n      const from = this.state.selectedLineFromTo[0];\n      const to = this.state.selectedLineFromTo[1];\n      if (from !== -1 || to !== -1) {\n        this.cancelNewline();\n        this.props.update(from, {\n          connectedTo: null,\n        });\n        return;\n      }\n    }\n  }\n\n  startNewline(id) {\n    /* starts the construction of a tentative new line */\n\n    this.setState( {\n      isNewline: true,\n      id: id,\n      selectedLineFromTo: [-1, -1], // reset line selection\n    });\n  }\n\n  cancelNewline() {\n    /* cancels the tentative new line */\n    this.setState({\n      isNewline: false,\n      id: -1,\n      selectedLineFromTo: [-1, -1], // reset line selection\n    })\n  }\n\n  trackMouse(e) {\n    /* a helper function to keep tracking mouse movement */\n    this.setState({\n      x: e.clientX - this.state.xOffset,\n      y: e.clientY - this.state.yOffset,\n    });\n\n    if (this.state.dragging !== -1) {\n      const newX = e.clientX + this.state.initModelX - this.state.initX;\n      const newY = e.clientY + this.state.initModelY - this.state.initY;\n      this.props.update(this.state.dragging, {\n        x: newX,\n        y: newY,\n      });\n    }\n  }\n\n  onMouseUp(e) {\n    /* when the click is released, stop the drag-n-drop\n     * and decide if it's an actual click\n     */\n    \n    if (this.state.dragging === -1) {\n      return;\n    }\n    const dragging = this.state.dragging;\n    const dragged = this.props.models[dragging];\n\n    // reset drag\n    this.setState({\n      dragging: -1,\n    });\n    \n    const threshold = 10;\n    // if movement is small enough, consider it a click\n    if (Math.abs(dragged.x - this.state.initModelX) + Math.abs(dragged.y - this.state.initModelY) < threshold) {\n      this.props.select(dragged.ID);\n      this.handleElementClick(dragged.ID);\n    }\n  }\n\n  handleBGClick(e) {\n    /* handles a click on the background */\n    if (e.target === this.refs.canvas) {\n      this.props.select(-1); // deselect elements\n      this.cancelNewline();\n      return;\n    }\n    // the rest is handled on handleElementClick\n  }\n\n  handleElementClick(id) {\n    /* handles a click to one of the elemnts, to be passed\n     * to the child classes of the canvas\n     */\n    // if this is a new line, clicked on another object\n    if (this.state.isNewline) {\n\n      // if the line is drawn to itself, ignore\n      if (this.state.id !== id) {\n        // update model so that new connection is made\n        this.props.update(this.state.id, {\n          connectedTo: id,\n        });\n        \n        // if the reverse connection exists, cancel it\n        if (this.props.models[id].connectedTo === this.state.id) {\n          this.props.update(id, {\n            connectedTo: null,\n          })\n        }\n      }\n      // remove temporary line\n      this.cancelNewline();\n      return;\n    }\n    // if no current line, start one\n    this.startNewline(id);\n  }\n\n  handleLineClick(idFrom, idTo) {\n    /* handles a click on the line, to be passed\n     * to the child class\n     */\n    this.setState({\n      selectedLineFromTo: [idFrom, idTo]\n    })\n    this.props.select(-1);\n  }\n\n  handleDrag(initX, initY, id) {\n    /* handle a new dragging session */\n    const model = this.props.models[id];\n    this.setState({\n      dragging: id,\n      initX: initX,\n      initY: initY,\n      initModelX: model.x,\n      initModelY: model.y\n    });\n    this.props.select(model.ID);\n  }\n\n  render() {\n    // let's do all the layers from the model first\n    const modelElements = Object.entries(this.props.models).map(([key, model]) => {\n\n    \n      return <Group key={model.ID} handleDrag={this.handleDrag} model={model} selected={this.props.selected===model.ID}/>;\n    });\n    \n    // this part handles rendering the tentative line (if any)\n    let tentativeLine = null;\n    if (this.state.isNewline) {\n      const coords = modelCenter(this.props.models[this.state.id]);\n      tentativeLine = <Line tentative={true} selected={true} x1={coords.x} y1={coords.y} x2={this.state.x} y2={this.state.y}/>\n    }\n\n    // renders all the lines between models\n    const lines = Object.entries(this.props.models).map(([index, model]) => {\n      // no line if there is no connection\n      if (model.connectedTo === null) {\n        return null;\n      }\n      const otherModel = this.props.models[model.connectedTo];\n      const coords = modelCenter(model);\n      const otherCoords = modelCenter(otherModel);\n      const selected = this.state.selectedLineFromTo[0]===model.ID && this.state.selectedLineFromTo[1] === otherModel.ID;\n\n      return <Line key={index} tentative={false} selected={selected} x1={coords.x} y1={coords.y} x2={otherCoords.x} y2={otherCoords.y} onClick={() => this.handleLineClick(model.ID, otherModel.ID)}></Line>\n    })\n\n    \n    return (\n      // stick a rect for background\n      <svg onClick={this.handleBGClick} onMouseMove={this.trackMouse} onMouseUp={this.onMouseUp} id=\"canvas\" width=\"100%\" height=\"60%\" ref=\"canvas\">\n        <MarkerDefs/>\n        <rect width=\"100%\" height=\"100%\" fill=\"#b477ec\" pointerEvents=\"none\"/>\n        {modelElements}\n        {lines}\n        {tentativeLine}\n      </svg>\n    )\n  }\n  \n}\n\nfunction Padding(props) {\n  /* just padding to make the main canvas look better */\n  return (\n    <svg width=\"100%\" height=\"20%\">\n      <rect width=\"100%\" height=\"100%\" fill=\"blueviolet\"/>\n    </svg>\n  )\n}\n\nexport function CanvasContainer(props) {\n  /* contains the main section of the page yay */\n  return (\n    // padding on top and below to look extra good\n    <div className=\"p-2 flex-grow-1 canvas-container no-margin\"> \n      <Padding/>\n      <Canvas models={props.models} editableSelected={props.editableSelected} selected={props.selected} select={props.select} update={props.update} remove={props.remove}/>\n      <Padding/>\n    </div>\n  );\n}","import React from \"react\";\nimport \"./Toolbar.css\";\nimport {nodeTypes} from \"./ModelInfo.js\";\n\nfunction DisplayLine(props) {\n  /* Returns a line of view-only parameter */\n  return (\n    <div className=\"parameter-line\">\n      <div className=\"parameter-name\">{props.name}:</div>\n      <div className=\"parameter-value\">{props.value}</div>\n    </div>\n  )\n}\n\nclass EditableLine extends React.Component {\n  /* a line of parameters that is editable */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      valueChanged: false,\n      currentValue: null,\n    };\n    // handles: \n    // onFocus -- reports to parent that editable is selected\n    // onChange -- updates and stores internal value\n    // onBlur -- callbacks to update the model and reset the internal state\n    this.onFocus = () => this.props.setEditableSelected(true);\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = (value) => {\n      this.setState({\n        valueChanged: false,\n        currentValue: null,\n      });\n      this.props.setEditableSelected(false);\n      this.props.callback(this.props.paraName, value);\n    };\n  }\n\n  onChange(event) {\n    /* update the value of the parameter when changed */\n    const value = event.target.value;\n\n    this.setState({\n      valueChanged: true,\n      currentValue: value,\n    });\n  }\n\n  render() {\n    const oldValue = this.props.parameters[this.props.paraName];\n    // display oldValue if no value is changed\n    const value = (this.state.valueChanged ? this.state.currentValue : oldValue);\n\n    return (\n      <div className=\"parameter-line\">\n        <div className=\"parameter-name\">{this.props.name}</div>\n        <input className=\"parameter-input\" onFocus={this.onFocus} onBlur={() => this.onBlur(value)} onChange={this.onChange} value={value}></input>\n      </div>\n    )\n  } \n}\n\nfunction DataInput(props) {\n  /* the line allowing setting of dataset */\n  return (\n    <div className=\"parameter-line\">\n      <div className=\"parameter-name\">Dataset</div>\n      <div className=\"parameter-input parameter-clickable\" onClick={props.setInputDataset}>{props.value}</div>\n      \n    </div>\n  );\n}\n\nfunction Parameters(props) {\n  /* Returns a list of lines of editable parameters */\n  const model = props.model;\n  if (model === null) {\n    return null;\n  }\n\n  // differs depending on model type\n  switch (model.type) {\n    case \"dense\":\n      return (\n        <React.Fragment>\n          <EditableLine name=\"Units\" paraName=\"units\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,false)}/>\n        </React.Fragment>\n      );\n    case \"conv\":\n      return (\n        <React.Fragment>\n          <EditableLine name=\"Filters\" paraName=\"filters\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,false)}/>\n          <EditableLine name=\"Kernel Size\" paraName=\"kernelSize\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,true)}/>\n          <EditableLine name=\"Stride\" paraName=\"stride\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,true)}/>\n        </React.Fragment>\n      )\n    case \"input\":\n      return (\n        <React.Fragment>\n          <DataInput value={model.parameters.data} setInputDataset={props.setInputDataset}></DataInput>\n        </React.Fragment>\n      )\n    case \"maxpool\":\n      return (\n        <React.Fragment>\n          <EditableLine name=\"Pool Size\" paraName=\"poolSize\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,true)}/>\n        </React.Fragment>\n      )\n    case \"embedding\":\n      return (\n        <React.Fragment>\n          <EditableLine name=\"Units\" paraName=\"units\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,false)}/>\n        </React.Fragment>\n      )\n    case \"dropout\":\n      return (\n        <React.Fragment>\n          <EditableLine name=\"Rate\" paraName=\"rate\" setEditableSelected={props.setEditableSelected} parameters={model.parameters} callback={(n,v)=>props.callback(n,v,false,true)}/>\n        </React.Fragment>\n      )\n    default:\n      return null;\n  }\n}\n\nexport function Toolbar(props) {\n  /* the master toolbar to the bottom */\n\n  // if no model is selected, show training information\n  if (props.selected === -1) {\n    const modelInfo = props.modelInfo;\n    const trainingInfo = props.trainingInfo;\n    const loss = (trainingInfo.loss === null) ? \"N/A\" : trainingInfo.loss.toFixed(2);\n    const accuracy = (trainingInfo.accuracy === null) ? \"N/A\" : (trainingInfo.accuracy*100).toFixed(2) + \"%\";\n    const testAccuracy = (trainingInfo.testAccuracy === null) ? \"N/A\" : (trainingInfo.testAccuracy*100).toFixed(2) + \"%\";\n    const progress = (trainingInfo.progress === null) ? \"0.0%\" : (trainingInfo.progress*100).toFixed(2) + \"%\";\n    return (\n      <nav className=\"p-2 no-margin\" id=\"toolbar\">\n        <div id=\"toolbar-container\">\n          <div className=\"left-line\">\n            <p>Model Information</p>\n            <EditableLine name=\"Epochs\" paraName=\"epochs\" setEditableSelected={()=>null} parameters={modelInfo} callback={(n,v) => props.updateModelInfo(n,v,true)}/>\n            <EditableLine name=\"Batch Size\" paraName=\"batchSize\" setEditableSelected={()=>null} parameters={modelInfo} callback={(n,v) => props.updateModelInfo(n,v,true)}/>\n            <button onClick={props.trainSetup} className=\"btn btn-sm btn-light btn-block\">More</button>\n          </div>\n          <div className=\"blocker\"></div>\n          <div className=\"middle-line\">\n            <p>Train Information</p>\n            <DisplayLine name=\"Status\" value={trainingInfo.status}/>\n            <DisplayLine name=\"Progress\" value={progress}/>\n          </div>\n          <div className=\"blocker\"></div>\n          <div className=\"right-line\">\n            <br></br>\n            <DisplayLine name=\"Accuracy\" value={accuracy}/>\n            <DisplayLine name=\"Loss\" value={loss}/>\n            <DisplayLine name=\"Test Acc\" value={testAccuracy}/>\n          </div>\n        </div>\n      </nav>\n    )\n  }\n\n  // if a model is selected...\n  // show the model's parameters page\n  const model = props.models[props.selected];\n\n  const type = nodeTypes[model.type].name;\n  const activation = (model.activation === null) ? \"None\" : nodeTypes[model.activation].name;\n  const incomingShape = (model.shapeIn === null ? \"N/A\" : String(model.shapeIn));\n  const outgoingShape = (model.shapeOut === null ? \"N/A\" : String(model.shapeOut));\n  return (\n    <nav className=\"p-2 no-margin\" id=\"toolbar\">\n      <div id=\"toolbar-container\">\n        \n        <div className=\"left-line\">\n          <p>Parameters</p>\n          <Parameters model={model} callback={props.update} setEditableSelected={props.setEditableSelected} setInputDataset = {props.setInputDataset}/>\n        </div>\n        <div className=\"blocker\"></div>\n        <div className=\"middle-line\">\n          <p>Layer Information</p>\n          <DisplayLine name=\"Type\" value={type}/>\n          <DisplayLine name=\"Activation\" value={activation}/>\n        </div>\n        <div className=\"blocker\"></div>\n        <div className=\"right-line\">\n          <br></br>\n          <DisplayLine name=\"Shape In\" value={incomingShape}/>\n          <DisplayLine name=\"Shape Out\" value={outgoingShape}/>\n        </div>\n      </div>\n    </nav>\n  )\n}","import React from 'react';\nimport \"./ErrorBox.css\";\n\nexport function ErrorBox(props) {\n  /* Renders a dismissable error message */\n  // display nothing if no error message\n  if (props.errorMsg === null) {\n    return null;\n  }\n  if (props.dismissible) {\n    return (\n      <div className=\"position-absolute float-box\">\n        <div className=\"alert alert-danger alert-dismissible position-absolute w-100\">\n          <strong>Error:</strong> {props.errorMsg}\n          <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" \n                  onClick={() => props.setError(null, true)}>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div className=\"position-absolute float-box\">\n      <div className=\"alert alert-danger position-absolute w-100\">\n        <strong>Error:</strong> {props.errorMsg}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport \"./SelectModel.css\";\n\nexport class SelectModel extends React.Component {\n  /* the page selecting a model */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      err: null,\n      link: null,\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.noChange = this.noChange.bind(this);\n    this.loadModel = this.loadModel.bind(this);\n    this.setError = this.setError.bind(this);\n  }\n\n  setError(err) {\n    /* set local error (to be displayed as small text) */\n    this.setState({err:err})\n  }\n\n  loadModel() {\n    /* load a custom model */\n    this.props.loadModel(this.state.link, this.setError);\n  }\n\n  onChange(e) {\n    /* when the textbox is editted */\n    this.setState({link:e.target.value});\n  }\n\n  noChange(e) {\n    /* the model selection is cancelled and nothing is done \n     * if the user clicks on the background\n     */\n    if (e.target.id === \"background-model-select\" || e.target.id === \"model-blocker\") {\n      this.props.toggle();\n    }\n  }\n  render() {\n    // empty if not displaying\n    if (!this.props.display) {\n      return null;\n    }\n    return (\n      <div id=\"background-model-select\" onClick={this.noChange} className=\"select-model-container\">\n        <h1>Load a Model</h1>\n        <div className=\"model-container\">\n          <div className=\"model-new\">\n            <h2>New Model</h2>\n            <div className=\"d-flex flex-wrap p-2\">\n              <div className=\"p-2\"><button type=\"button\" onClick={() => this.props.loadDefaultModel(\"blank\")} className=\"btn btn-secondary\">Blank</button></div>\n              <div className=\"p-2\"><button type=\"button\" onClick={() => this.props.loadDefaultModel(\"dense\")} className=\"btn btn-secondary\">Dense</button></div>\n              <div className=\"p-2\"><button type=\"button\" onClick={() => this.props.loadDefaultModel(\"conv\")} className=\"btn btn-secondary\">Conv</button></div>\n            </div>\n            \n          </div>\n          <div id=\"model-blocker\" className=\"model-blocker\"></div>\n          <div className=\"model-load\">\n            <h2>Load Model</h2>\n            <label>Model link</label>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Enter model link\" onChange={this.onChange}></input>\n            <small className=\"form-text text-muted\">{this.state.err}</small>\n            <br></br>\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={this.loadModel}>Load</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}","import React from 'react';\nimport \"./LinkPage.css\";\n\nexport function LinkPage(props) {\n  /* the page showing a link is generated */\n  if (!props.display) {\n    return null;\n  }\n  // some code to copy the link to clipboard\n  // create a dummy element with the link as text\n  // select it and copy the text\n  var dummy = document.createElement(\"textarea\");\n  document.body.appendChild(dummy);\n  dummy.value = props.link;\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n  return (\n    <div onClick={e=>{\n      if (e.target.id === \"linkpage-container\" || e.target.id === \"linkpage-content\") {\n        props.toggle();\n      }\n    }} className=\"linkpage-container\" id=\"linkpage-container\">\n      <div className=\"linkpage-content\" id=\"linkpage-content\">\n      <h1>Model Link</h1>\n      <input readOnly className=\"form-control\" type=\"text\" value={props.link}/>\n      <small className=\"form-text text-muted\">{\"Link copied to clipboard\"}</small>\n      </div>\n    </div>\n  );\n  \n}","import React from 'react';\nimport \"./SetInput.css\";\n\nexport class SetInput extends React.Component {\n  /* the page to select an input dataset */\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      err: null, // internal error\n      name: \"\", // name of dataset\n      link: \"\", // link to dataset\n      inputShape: [], // user-specified shape\n      outputShape: [],\n      inputShapeDisplay: \"\", // texts to display the corresponding shapes\n      outputShapeDisplay: \"\",\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.noChange = this.noChange.bind(this);\n    this.setError = this.setError.bind(this);\n    this.onChangeShapeInput = this.onChangeShapeInput.bind(this);\n    this.onChangeShapeOutput = this.onChangeShapeOutput.bind(this);\n    this.onChangeName = this.onChangeName.bind(this);\n    this.onBlurInput = this.onBlurInput.bind(this);\n    this.onBlurOutput = this.onBlurOutput.bind(this);\n  }\n\n  setError(err) {\n    /* set internal error */\n    this.setState({err:err})\n  }\n\n  onChange(e) {\n    /* update the link's text */\n    this.setState({link:e.target.value});\n  }\n\n  breakShape(value) {\n    /* helper function to break down a string describing an array\n     * into an actual array\n     */\n    let components = String(value).split(\",\");\n\n    // do not accept empty inputs\n    if (components.length === 0) {\n      return [];\n    }\n    for (var i = 0; i < components.length; i++) {\n      const num = parseInt(components[i]);\n      // do not update if any member of tuple is not a number\n      if (isNaN(num)) {\n        return null;\n      }\n      components[i] = num;\n    }\n    return components;\n  }\n\n  toString(shape) {\n    /* convert an array into its string representation */\n    if (shape.length === 0) {\n      return \"\";\n    }\n    return shape.join(\",\");\n  }\n\n  onChangeShapeInput(e) {\n    /* change the input shape's display (its string) */\n    this.setState({\n      inputShapeDisplay: e.target.value,\n    })\n  }\n\n  onBlurInput(e) {\n    /* update the input shape to reflect the user input \n     * (stored in inputShapeDisplay), rejecting it if\n     * malformed\n     */\n\n    const components = this.breakShape(e.target.value);\n    // reject the shape if malformed\n    if (components === null) {\n      this.setState({\n        inputShapeDisplay: this.toString(this.state.inputShape),\n      });\n      return;\n    }\n    this.setState({\n      inputShape: components,\n      inputShapeDisplay: this.toString(components)\n    });\n  }\n\n  onChangeShapeOutput(e) {\n    /* change the output shape's display (its string) */\n    this.setState({\n      outputShapeDisplay: e.target.value,\n    });\n  }\n\n  onBlurOutput(e) {\n    /* update the output shape to reflect the user output \n     * (stored in outputShapeDisplay), rejecting it if\n     * malformed\n     */\n    const components = this.breakShape(e.target.value);\n    // reject the shape if malformed\n    if (components === null) {\n      this.setState({\n        outputShapeDisplay: this.toString(this.state.outputShape),\n      });\n      return;\n    }\n    this.setState({\n      outputShape: components,\n      outputShapeDisplay: this.toString(components),\n    });\n  }\n  \n  onChangeName(e) {\n    /* update the name of the dataset */\n    this.setState({\n      name: e.target.value,\n    })\n  }\n\n  noChange(e) {\n    /* cancel this page without any changes if background is clicked */\n    if (e.target.id === \"background-input-set\" || e.target.id === \"input-blocker\") {\n      this.props.toggle();\n    }\n  }\n\n  render() {\n    if (!this.props.display) {\n      return null;\n    }\n    return (\n      <div id=\"background-input-set\" onClick={this.noChange} className=\"set-input-container\">\n      <h1>Load Input Dataset</h1>\n      <div className=\"input-container\">\n        <div className=\"input-preset\">\n          <h2>Load Preset</h2>\n          <div className=\"d-flex flex-wrap p-2\">\n            <div className=\"p-2\"><button type=\"button\" onClick={() => this.props.loadDefaultInput(\"MNIST\")} className=\"btn btn-secondary\">MNIST</button></div>\n          </div>\n          \n        </div>\n        <div id=\"input-blocker\" className=\"input-blocker\"></div>\n        <div className=\"input-load\">\n          <h2>Load Custom Dataset (BROKEN)</h2>\n          <div className=\"form-group\">\n            <input type=\"text\" className=\"form-control\" placeholder=\"Enter input URL\" onChange={this.onChange} value={this.state.link}></input>\n          </div>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Name\" onChange={this.onChangeName} value={this.state.name}></input>\n          <small className=\"form-text\">Shape does not include batchSize</small>\n          <div className=\"form-row\">\n            \n            <div className=\"col\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Input shape\" onChange={this.onChangeShapeInput} onBlur={this.onBlurInput} value={this.state.inputShapeDisplay}></input>\n            </div>\n            <div className=\"col\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Output shape\" onChange={this.onChangeShapeOutput} onBlur={this.onBlurOutput} value={this.state.outputShapeDisplay}></input>\n            </div>\n          </div>         \n          \n          <small className=\"form-text text-muted\">{this.state.err}</small> \n          <br></br>\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={()=>this.props.loadInput(this.state.link, this.state.name, this.state.inputShape, this.state.outputShape, this.setError)}>Load</button>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}","export function isCyclic(models) {\n  /* Checks if the models constitute directed acyclic graphs\n   * (Potentially multiple acyclic graphs)\n   * Returns false only if there is an internal loop\n   */\n  let visited = {}; // whether the node is visited\n  let inRecursionStack = {}; // whether the node is in the currentfunction call stack\n\n  for (const key of Object.keys(models)) {\n    visited[key] = false;\n    inRecursionStack[key] = false;\n  }\n\n  for (const key of Object.keys(models)) {\n    if (isCyclicHelper(models, key, visited, inRecursionStack)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isCyclicHelper(models, index, visited, inRecursionStack) {\n  /* A helper function to explore from a single node. Returns\n   * false if there is no discrepancy found from this index \n   */\n\n  // if visited, remove out of stack and say no\n  if (visited[index]) {\n    inRecursionStack[index] = false;\n    return false;\n  }\n\n  visited[index] = true;\n  inRecursionStack[index] = true;\n  // if no neighbor, then no discrepancy\n  if (models[index].connectedTo === null) {\n    inRecursionStack[index] = false; \n    return false;\n  }\n\n  const next = models[index].connectedTo;\n  if (!visited[next] && isCyclicHelper(models, next, visited, inRecursionStack)) {\n    return true;\n  }\n  // if we bump into a node on our incoming path, it's bad\n  if (inRecursionStack[next]) {\n    return true;\n  }\n\n  inRecursionStack[index] = false;\n  return false;\n}\n\nexport function isLinear(models) {\n  /* checks if the model current makes sense:\n   * all nodes cannot have > 1 incoming edge\n   * input node cannot have incoming edge\n   * output node cannot have outgoing edge\n   */ \n  let numIncomingEdges = {};\n  for (const key of Object.keys(models)) {\n    numIncomingEdges[key] = 0;\n  }\n\n  for (const key of Object.keys(models)) {\n    const next = models[key].connectedTo;\n    if (next !== null) {\n      numIncomingEdges[next] += 1;\n    }\n  }\n\n  // the input node must not have incoming edges\n  if (numIncomingEdges[0] !== 0) {\n    return {ok: false, err: \"Input node cannot have incoming edge\"};\n  }\n  // the output node must not have outgoing edges\n  if (models[1].connectedTo !== null) {\n    return {ok: false, err: \"Output node cannot have outgoing edge\"}; \n  }\n  for (const key of Object.keys(models)) {\n    if (numIncomingEdges[key] > 1) {\n      return {\"ok\": false, err:\"No node can have more than one incoming edge\"};\n    }\n  }\n  return {\"ok\": true, err:\"\"};\n}\n\nexport function prev(models, id) {\n  /* Returns id of the node linking to the model pointed \n   * to by the id, if any; if none, return null \n   */\n  for (const key of Object.keys(models)) {\n    if (models[key].connectedTo === id) {\n      return key;\n    }\n  }\n  return null;\n}\n\nexport function isTrainable(models) {\n  /* Is the current architecture trainable? */\n  const resp = isLinear(models);\n  // if not linear, then fail\n  if (!resp[\"ok\"]) {\n    return resp;\n  }\n  if (isCyclic(models)) {\n    return {ok: false, err: \"Model cannot be cyclic\"};\n  }\n  \n  // output node must not be empty, \n  // have ndim = 2, and agree with batch size\n  if (models[1].shapeIn === null || models[1].shapeOut.length !== 2) {\n    return {ok: false, err: \"Output node must have shape (batchSize, categories)\"};\n  }\n\n  let currentNode = models[0]; // input node\n  while (currentNode.ID !== 1) { // need to reach output node\n    if (currentNode.connectedTo === null) {\n      return {ok: false, err: \"Model does not connect from input node to output node\"};\n    }\n    currentNode = models[currentNode.connectedTo];\n  }\n  return {ok: true, err: \"\"};\n}","import {BASE_URL} from \"./Constants.js\";\n\n// functions to communicate with the server\n\nexport function getModel(modelID) {\n  /* get a model given its id from the server */\n  return fetch(BASE_URL+\"Architecture?id=\"+modelID).then(response => { \n    if (response.status === 200 || response.status === 404 || response.status === 400) {\n      return response.json();\n    }\n    throw new Error(\"Something went wrong when getting model\");\n  }).then(json => {\n    if ('message' in json) {\n      throw new Error(json['message']);\n    }\n    return json.data['modelJSON'];\n  })\n}\n\nexport function saveModel(serializedModel) {\n  /* save the serialized model to the server and returns its id */\n  return fetch(BASE_URL+'Architecture', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: serializedModel,\n  }).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    } else {\n      throw new Error(\"Something went wrong\");\n    }\n  })\n}\n\nexport function startSession(id) {\n  /* start a new training session given the model id */\n  return fetch(BASE_URL+\"Train\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({id:id}),\n  }).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    }\n    throw new Error(\"Internal error\");\n  });\n}\n\nexport function updateTrain(sessionID) {\n  /* get the latest training status of a training session */\n  return fetch(BASE_URL+\"Train?id=\"+sessionID).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    }\n    throw new Error(\"Training session failed to be fetched\");\n  })\n}\n\nexport function deleteTrain(sessionID) {\n  /* delete the training session given its session id */\n  return fetch(BASE_URL+\"Train\", {\n    method: \"DELETE\",\n    body: JSON.stringify({id:sessionID}),\n  });\n}\n\nexport function generateLink(id) {\n  /* generate a link for a saved model at the server */\n  return fetch(BASE_URL+\"Link\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({modelID: id})\n  }).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    }\n    throw new Error(\"Failed to generate link\");\n  })\n}\n\nexport function getIDFromLink(link) {\n  /* get the corresponding model ID from the link */\n  return fetch(BASE_URL+\"Link?link=\"+link).then(response => {\n    if (response.status === 200 || response.status === 404 || response.status === 400)\n      return response.json();\n    throw new Error(\"Something went wrong with retrieving ID from link\");\n  }).then(json => {\n    if ('message' in json) {\n      throw new Error(json['message']);\n    }\n    return json['id'];\n  })\n}\n\nexport function downloadModel(modelID) {\n  /* get the json download for the model from its model ID */\n  return fetch(BASE_URL+\"Download?id=\"+modelID).then(response => {\n    if (response.status === 200 || response.status === 404 || response.status === 400)\n      return response.json();\n    throw new Error(\"Something went wrong with downloading the model\");\n  }).then(json => {\n    if ('message' in json) {\n      throw new Error(json['message']);\n    }\n    return json['data'];\n  })\n}\n\nexport function loadInput(url, name, inputShape, outputShape) {\n  /* load the custom input from the server */\n  return fetch(BASE_URL+\"Dataset\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      link: url,\n      datasetName: name,\n      inputShape: String(inputShape),\n      outputShape: String(outputShape),\n    })\n  }).then(response => {\n    if (response.status === 201 || response.status === 404 || response.status === 400) \n      return response.json();\n    throw new Error(\"Something went wrong when loading the input\");\n  }).then(json => {\n    console.log(json);\n    if ('message' in json) {\n      throw new Error(json['message']);\n    }\n    return json['data'];\n  });\n}","import React from \"react\";\nimport \"./TrainSetup.css\";\n\nfunction Option(props) {\n  /* one option on the list, specially shown if selected */\n  const className = (props.selected === props.name) ? \"btn btn-info\" : \"btn btn-secondary\"\n  return (\n    <div className=\"p-2\">\n      <button type=\"button\" onClick={() => props.select(props.name)} className={className}>{props.displayName}</button>\n    </div>\n  )\n}\n\nexport class TrainSetup extends React.Component {\n  /* the page setting details of training configuration */\n  constructor(props) {\n    super(props);\n    this.props = props;\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e) {\n    /* cancel this page if background is clicked */\n    if (e.target.id === \"background-input-set\") {\n      this.props.toggle();\n    }\n  }\n\n  render() {\n    if (!this.props.display) {\n      return null;\n    }\n    return (\n      <div id=\"background-input-set\" className=\"set-input-container\" onClick={this.onClick}>\n      <h1>Setup Training Details</h1>\n      <div className=\"input-container\">\n        <div className=\"input-preset\">\n          <h2>Optimizer</h2>\n          <div>\n            Learning Rate: <input id=\"learning-rate\" type=\"number\" step=\"any\" value={this.props.modelInfo.learningRate} onChange={() => this.props.update(\"learningRate\", parseFloat(document.getElementById(\"learning-rate\").value))} min=\"0\"></input>\n          </div>\n          <div className=\"d-flex flex-wrap p-2\">\n            <Option name=\"adam\" displayName=\"Adam\" selected={this.props.modelInfo.optimizer} select={(v)=>this.props.update(\"optimizer\", v)}></Option>\n            <Option name=\"sgd\" displayName=\"SGD\" selected={this.props.modelInfo.optimizer} select={(v)=>this.props.update(\"optimizer\", v)}></Option>\n            <Option name=\"rmsProp\" displayName=\"RMS Prop\" selected={this.props.modelInfo.optimizer} select={(v)=>this.props.update(\"optimizer\", v)}></Option>\n          </div>\n        </div>\n\n        <div id=\"input-blocker\" className=\"input-blocker\"></div>\n        <div className=\"input-load\">\n          <h2>Loss</h2>\n          <div className=\"d-flex flex-wrap p-2\">\n            <Option name=\"mse\" displayName=\"Mean Squared Error\" selected={this.props.modelInfo.loss} select={(v)=>this.props.update(\"loss\", v)}></Option>\n            <Option name=\"logcosh\" displayName=\"Log Cosh\" selected={this.props.modelInfo.loss} select={(v)=>this.props.update(\"loss\", v)}></Option>\n            <Option name=\"cce\" displayName=\"Categorical Crossentropy\" selected={this.props.modelInfo.loss} select={(v)=>this.props.update(\"loss\", v)}></Option>\n          </div>\n        </div>\n      </div>\n      </div>\n      );\n    }\n}","import * as tf from '@tensorflow/tfjs';\n\nexport function compileModel(models,modelInfo) {\n  const model = getModel(models, modelInfo);\n  const optimizer = getOptimizer(modelInfo);\n  const loss = getLoss(modelInfo.loss);\n  model.compile({\n    optimizer: optimizer,\n    loss: loss,\n    metrics: ['acc']\n  });\n  return model;\n}\n\nfunction getLoss(loss) {\n  let loss_fn = null;\n  switch (loss) {\n    case \"mse\":\n      loss_fn = tf.losses.meanSquaredError;\n      break;\n    case \"logcosh\":\n      loss_fn = \"logcosh\";\n      break;\n    case \"cce\":\n      loss_fn = \"categoricalCrossentropy\";\n      break;\n    default:\n      break;\n  }\n  return loss_fn;\n}\n\nfunction getOptimizer(modelInfo) {\n  let optimizer = null;\n  switch (modelInfo.optimizer) {\n    case \"adam\":\n      optimizer = tf.train.adam\n      break;\n    case \"sgd\":\n      optimizer = tf.train.sgd;\n      break;\n    case \"rmsprop\":\n      optimizer = tf.train.rmsprop;\n      break;\n    default:\n      break;\n  }\n  return optimizer(modelInfo.learningRate);\n}\n\nfunction getModel(models, modelInfo) {\n  let layers = {};\n  Object.keys(models).map((key, index) => {\n    const model = models[key];\n    layers[key] = compileLayer(model,modelInfo);\n    return null;\n  });\n  const model = tf.sequential();\n  let current_id = 0;\n  do {\n    model.add(layers[current_id]);\n    current_id = models[current_id].connectedTo;\n  } while (models[current_id].type !== \"output\")\n  model.add(layers[current_id]);\n  return model;\n}\n\nfunction compileLayer(model, modelInfo) {\n  const f = getLayerF(model);\n  let para = JSON.parse(JSON.stringify(model.parameters)); // make a copy\n  para.activation = model.activation;\n  if (model.type === \"input\") {\n    para.inputShape = model.shapeIn.slice(1);\n  } else if (model.type === \"output\") {\n    para.units = model.shapeOut.slice(1)[0];\n  } else if (model.type === \"embedding\") {\n    para.inputDim = modelInfo.maxToken;\n    para.outputDim = para.units;\n  }\n  return f(para);\n}\n\nfunction getLayerF(model) {\n  let f = null;\n  const shape = model.shapeIn.slice(1, model.shapeIn.length-1);\n\n  switch (model.type) {\n    case \"input\":\n      f = tf.layers.inputLayer;\n      break;\n    case \"output\":\n      f = tf.layers.dense;\n      break;\n    case \"dense\":\n      f = tf.layers.dense;\n      break;\n    case \"conv\":\n      if (shape.length === 1) {\n        f = tf.layers.conv1d;\n      } else if (shape.length === 2) {\n        f = tf.layers.conv2d;\n      }\n      break;\n    case \"maxpool\":\n      if (shape.length === 1) {\n        f = tf.layers.maxPooling1d;\n      } else if (shape.length === 2) {\n        f = tf.layers.maxPooling2d;\n      }\n      break;\n    case \"flatten\":\n      f = tf.layers.flatten;\n      break;\n    case \"embedding\":\n      f = tf.layers.embedding;\n      break;\n    case \"dropout\":\n      f = tf.layers.dropout;\n      break;\n    default:\n      break; \n  }\n  return f;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\nexport const IMAGE_H = 28;\nexport const IMAGE_W = 28;\nconst IMAGE_SIZE = IMAGE_H * IMAGE_W;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst NUM_TRAIN_ELEMENTS = 55000;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\nconst MNIST_LABELS_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and provide data as\n * tf.Tensors.\n */\nexport class MnistData {\n  async load() {\n    // Make a request for the MNIST sprited image.\n    const img = new Image();\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const imgRequest = new Promise((resolve, reject) => {\n      img.crossOrigin = '';\n      img.onload = () => {\n        img.width = img.naturalWidth;\n        img.height = img.naturalHeight;\n\n        const datasetBytesBuffer =\n            new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n        const chunkSize = 5000;\n        canvas.width = img.width;\n        canvas.height = chunkSize;\n\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n          const datasetBytesView = new Float32Array(\n              datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\n              IMAGE_SIZE * chunkSize);\n          ctx.drawImage(\n              img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\n              chunkSize);\n\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let j = 0; j < imageData.data.length / 4; j++) {\n            // All channels hold an equal value since the image is grayscale, so\n            // just read the red channel.\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\n          }\n        }\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n        resolve();\n      };\n      img.src = MNIST_IMAGES_SPRITE_PATH;\n    });\n\n    const labelsRequest = fetch(MNIST_LABELS_PATH);\n    const [_, labelsResponse] =\n        await Promise.all([imgRequest, labelsRequest]);\n\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages =\n        this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels =\n        this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    this.testLabels =\n        this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n  }\n\n  /**\n   * Get all training data as a data tensor and a labels tensor.\n   *\n   * @returns\n   *   xs: The data tensor, of shape `[numTrainExamples, 28, 28, 1]`.\n   *   labels: The one-hot encoded labels tensor, of shape\n   *     `[numTrainExamples, 10]`.\n   */\n  getTrainData(numTrainExapmles) {\n    let xs = tf.tensor4d(\n        this.trainImages,\n        [this.trainImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\n    let labels = tf.tensor2d(\n      this.trainLabels, [this.trainLabels.length / NUM_CLASSES, NUM_CLASSES]);\n\n    if (numTrainExapmles != null) {\n      xs = xs.slice([0, 0, 0, 0], [numTrainExapmles, IMAGE_H, IMAGE_W, 1]);\n      labels = labels.slice([0, 0], [numTrainExapmles, NUM_CLASSES]);\n    }\n    return [xs, labels];\n  }\n\n  /**\n   * Get all test data as a data tensor a a labels tensor.\n   *\n   * @param {number} numExamples Optional number of examples to get. If not\n   *     provided,\n   *   all test examples will be returned.\n   * @returns\n   *   xs: The data tensor, of shape `[numTestExamples, 28, 28, 1]`.\n   *   labels: The one-hot encoded labels tensor, of shape\n   *     `[numTestExamples, 10]`.\n   */\n  getTestData(numExamples) {\n    let xs = tf.tensor4d(\n        this.testImages,\n        [this.testImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\n    let labels = tf.tensor2d(\n        this.testLabels, [this.testLabels.length / NUM_CLASSES, NUM_CLASSES]);\n\n    if (numExamples != null) {\n      xs = xs.slice([0, 0, 0, 0], [numExamples, IMAGE_H, IMAGE_W, 1]);\n      labels = labels.slice([0, 0], [numExamples, NUM_CLASSES]);\n    }\n    return [xs, labels];\n  }\n}","import React from 'react';\nimport {Sidebar} from \"./Sidebar.js\";\nimport {CanvasContainer} from \"./Canvas.js\";\nimport {Toolbar} from \"./Toolbar.js\";\nimport {ErrorBox} from \"./ErrorBox.js\";\nimport {SelectModel} from \"./SelectModel.js\";\nimport {LinkPage} from \"./LinkPage.js\";\nimport {SetInput} from \"./SetInput.js\";\nimport {isCyclic, isLinear, isTrainable} from \"./Utils.js\";\nimport {nodeTypes, blankModel, denseModel, convModel} from \"./ModelInfo.js\";\nimport {getModel, saveModel, generateLink, getIDFromLink, loadInput} from \"./Server.js\";\nimport {TrainSetup} from \"./TrainSetup.js\";\nimport {DATASET_SHAPE} from \"./Constants.js\";\nimport {compileModel} from \"./Model.js\";\nimport {MnistData} from \"./Data.js\";\nimport cloneDeep from 'lodash/cloneDeep';\nimport './App.css';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      models: { // represent the architecture\n        0: this._model(\"input\", 0, 20, 50),\n        1: this._model(\"output\", 1, 300, 50),\n      },\n      modelInfo: {\n        epochs: \"2\",\n        batchSize: \"25\",\n        maxToken: null,\n        loss: \"cce\", // loss function\n        optimizer: \"adam\",\n        learningRate: \"0.01\",\n      },\n      selected: 0, // selected node;\n      nextID: 2, // the ID for the next new layer; incremented as model grows\n      errorMsg: null, // error message\n      errorOnce: false, // whether the current error message can be cancelled \n      trainingInfo: {\n        accuracy: null,\n        testAccuracy: null,\n        loss: null,\n        progress: null,\n        status: \"Edit\", // whether the model is getting trained or editted\n        currentEpoch: 0,\n        correct: 0,\n        total: 0,\n        batchesPerEpoch: null,\n      },\n      \n      editableSelected: false, // whether an editable element of the toolbar is selected\n      selectModelPage: true, // is it in the page selecting model or main page\n      linkPage: false, // is link page on display\n      link: null, // the link for the current model\n      settingInput: false, // are we on a page to set input?\n      trainSetup: false, // are we customizing training information?\n    };\n\n    // function bindings\n    this.newModel = this.newModel.bind(this);\n    this.updateModel = this.updateModel.bind(this);\n    this.selectModel = this.selectModel.bind(this);\n    this.removeModel = this.removeModel.bind(this);\n\n    this.setEditableSelected = this.setEditableSelected.bind(this);\n    this.updateModelInfo = this.updateModelInfo.bind(this);\n    this.setError = this.setError.bind(this);\n\n    this.trainCloud = this.trainCloud.bind(this);    \n    this.startSession = this.startSession.bind(this);\n    this.endSession = this.endSession.bind(this); \n    this.updateTrain = this.updateTrain.bind(this);\n    this.cancelTrain = this.cancelTrain.bind(this);\n    this.state[\"models\"] = this._updateDependents(this.state.models);\n\n    this.loadDefaultModel = this.loadDefaultModel.bind(this);\n    this.loadModel = this.loadModel.bind(this);\n    this.downloadModel = this.downloadModel.bind(this);\n\n    this.getLink = this.getLink.bind(this);\n    this.setInput = this.setInput.bind(this);\n    this.loadDefaultInput = this.loadDefaultInput.bind(this);\n    this.loadCustomInput = this.loadCustomInput.bind(this);\n\n    this.trainSetup = this.trainSetup.bind(this);\n  }\n\n  componentDidMount() {\n    getModel(1); // any activity to the server to wake it up\n    // the server sleeps after 10 min of inactivity cuz\n    // I'm too poor to host a proper API server\n  }\n\n  _model(type, id, x, y) {\n    /* Helper function to make a new model (for a layer) given id and its position\n     */\n    return {\n      name: type + String(id),\n      ID: id,\n      type: type,\n      x: x,\n      y: y,\n      connectedTo: null,\n      shapeIn: null, // dependent\n      shapeOut: null, // dependent\n      activation: null,\n      parameters: cloneDeep(nodeTypes[type].defaultParameters),\n    };\n  }\n\n  model(type) {\n    /* Function to make a new model given its layer type, putting\n     * it in a random location on the upper left corner of the canvas\n     */\n    return this._model(type, this.state.nextID, 10 + Math.random() * 80, 10 + Math.random() * 80);\n  }\n  updateDependents(models) {\n    /* Given the current models, return models with the dependents\n     * (parameters updated given the independent variables) updated\n     * also reset the error (and may set some new ones given what happens in\n     * updating dependents)\n     */\n    this.setError(null, false);\n    return this._updateDependents(models);\n  }\n  _updateDependents(models) {\n    /* helper function to update members of nodes\n     * that depend on other parts of the system \n     */\n    // get the input model\n    let inputNode = models[0];\n    inputNode.shapeOut = nodeTypes[inputNode.type].shapeOut(inputNode.parameters, this.state.modelInfo, this.setError);\n    inputNode.shapeIn = inputNode.shapeOut;\n    let currentNode = inputNode;\n    let nextNode = models[inputNode.connectedTo];\n    while (currentNode.connectedTo !== null) {\n      nextNode.shapeIn = currentNode.shapeOut;\n      if (nextNode.type === \"input\") {\n        nextNode.shapeOut = nodeTypes[nextNode.type].shapeOut(nextNode.parameters, this.state.modelInfo, this.setError);\n      } else {\n        nextNode.shapeOut = nodeTypes[nextNode.type].shapeOut(nextNode.parameters, nextNode.shapeIn, this.setError);\n      }\n      \n      currentNode = nextNode;\n      nextNode = models[nextNode.connectedTo];\n    }\n    return models;\n  }\n\n  newModel(type) {\n    const oldModels = {...this.state.models};\n    let newModels = {...oldModels, [this.state.nextID]: this.model(type)};\n    newModels = this.updateDependents(newModels);\n    this.setState({\n      models: newModels,\n      nextID: this.state.nextID + 1,\n    });\n  }\n\n  selectModel(id) {\n    this.setState({\n      selected: id,\n    })\n  }\n\n  updateModel(id, dict) {\n    /* given a dict of properties to update ((name, value) pairs)\n     * updates the model of the given id\n     */\n    let models = {...this.state.models};\n    for (const key of Object.keys(dict)) {\n      models[id][key] = dict[key];\n    }\n    if (isCyclic(models)) {\n      this.setError(\"Graph cannot have loops\", false);\n      return;\n    } else if (!isLinear(models)[\"ok\"]) {\n      this.setError(isLinear(models)[\"err\"], false);\n      return;\n    } else {\n      this.setError(null, false)\n    }\n\n    models = this.updateDependents(models);\n    this.setState({\n      models: models,\n    });\n    \n  }\n\n  removeModel(id) {\n    /* given an id, removes the corresponding model\n     * and all connections to it\n     */\n\n    // get filtered models\n    let newModels = {};\n    for (const key of Object.keys(this.state.models)) {\n      if (this.state.models[key].ID !== id) {\n        newModels[key] = this.state.models[key];\n      }\n    }\n\n    for (const key of Object.keys(newModels)) {\n      if (newModels[key].connectedTo === id) {\n        newModels[key].connectedTo = null;\n      }\n    }\n\n    newModels = this.updateDependents(newModels);\n    this.setState({\n      models: newModels,\n    });\n  }\n\n  updateParameters(id, name, value, canTuple, floatOkay=false) {\n    /* given a name and a value\n     * updates the parameters of the model of the given id\n     */\n    // copy the model\n    const model = {...this.state.models[id]};\n\n    // now, important: check to ensure value is integer or tuple or integer\n    let components = String(value).split(\",\");\n\n    // do not accept empty inputs\n    if (components.length === 0) {\n      return;\n    }\n    for (var i = 0; i < components.length; i++) {\n      const num = floatOkay ? parseFloat(components[i]) : parseInt(components[i]);\n      // do not update if any member of tuple is not a number\n      if (isNaN(num)) {\n        return;\n      }\n      components[i] = num;\n    }\n    // if tuple, set array\n    if (components.length > 1) {\n      // no tuples for things that can't tuple\n      if (!canTuple) {\n        return;\n      }\n      model[\"parameters\"][name] = components;\n    } else {\n      model[\"parameters\"][name] = components[0];\n    }\n    let models = {...this.state.models}; // make a copy\n    \n    models[id] = model;\n    models = this.updateDependents(models);\n    this.setState({\n      models: models,\n    });\n  }\n\n  updateModelInfo(name, value, intOnly=false) {\n    /* update a key value pair of a model\n     * if intOnly is true, then the value must be an\n     * integer, or else it is rejected\n     */\n    \n    // reject non-ints\n    if (intOnly) {\n      if (isNaN(value) || value === \"\") {\n        return;\n      }\n    }\n    let modelInfo = this.state.modelInfo\n    modelInfo[name] = value;\n    this.setState({\n      modelInfo: modelInfo,\n    });\n  }\n\n  setError(err, once) {\n    /* sets the error message */\n    if (once) {\n      this.setState({\n        errorMsg: err,\n        errorOnce: once,\n      });\n    } else {\n      // do not override one-time messages\n      if (this.state.errorOnce && this.state.errorMsg !== null) {\n        return;\n      } else {\n        this.setState({\n          errorMsg: err,\n          errorOnce: once,\n        });\n      }\n    }\n    \n  }\n  \n  setEditableSelected(t) {\n    /* set whether an editable model is selected */\n    this.setState({\n      editableSelected: t,\n    });\n  }\n\n  trainCloud() {\n    /* train the model on cloud, if the model is \n     * well-formed\n     */\n\n    // first check if the model is linear\n    const models = this.updateDependents(this.state.models);\n    this.setState({\n      models: models,\n    })\n\n    // then we check if the model is well-formed\n    const resp = isTrainable(models);\n    if (!resp[\"ok\"]) {\n      this.setError(resp[\"err\"], true);\n      return;\n    }\n\n    const model = compileModel(this.state.models, this.state.modelInfo);\n\n    this.startSession(model);\n  }\n\n  \n\n  startSession(model) {\n    /* start training session */\n    // periodically retrieve latest training info\n    let trainingInfo = this.state.trainingInfo;\n    trainingInfo.status = 'Loading...';\n\n    this.setState({trainingInfo: trainingInfo});\n    const data = new MnistData();\n    const updateTrain = this.updateTrain;\n    const endSession = this.endSession;\n    data.load().then(() => {\n      const [xs, ys] = data.getTrainData(10000);\n      \n      trainingInfo.status = 'Training';\n      trainingInfo.batchesPerEpoch = Math.floor(xs.shape[0] / this.state.modelInfo.batchSize);\n      trainingInfo.currentEpoch = -1; // as the first call will add 1\n      this.setState({trainingInfo: trainingInfo});\n      model.fit(xs, ys, {\n        epochs: parseInt(this.state.modelInfo.epochs),\n        batchSize: parseInt(this.state.modelInfo.batchSize),\n        callbacks: {onBatchEnd: (batch, logs) => updateTrain(model, batch, logs), onTrainEnd: (logs) => endSession(model, data)},\n        validationSplit: 0.1,\n      });\n      \n    })\n    this.selectModel(-1); // deselect any model to show training progress\n  }\n\n  \n\n  updateTrain(model, batch, logs) {\n    /* update the information about the current training session */\n    // if early stopping\n    if (this.state.trainingInfo.status === \"Edit\") {\n      model.stopTraining = true;\n      return;\n    }\n    let trainingInfo = this.state.trainingInfo;\n    if (batch === 0) {\n      trainingInfo.currentEpoch += 1;\n      trainingInfo.correct = 0;\n      trainingInfo.total = 0;\n    }\n    const batchSize = parseInt(this.state.modelInfo.batchSize);\n    const epochs = this.state.modelInfo.epochs;\n    const batchesPerEpoch = this.state.trainingInfo.batchesPerEpoch;\n    const currentEpoch = trainingInfo.currentEpoch;\n\n    const correct = logs.acc * batchSize;\n    trainingInfo.correct += correct;\n    trainingInfo.total += batchSize;\n    trainingInfo.accuracy = trainingInfo.correct / trainingInfo.total;\n    trainingInfo.loss = logs.loss;\n    trainingInfo.progress = (currentEpoch / epochs) + (batch / batchesPerEpoch) / epochs;\n    this.setState({trainingInfo: trainingInfo});\n    return;\n  }\n\n  endSession(model, data) {\n    let trainingInfo = this.state.trainingInfo;\n    trainingInfo.progress = 1;\n    trainingInfo.currentEpoch = 0;\n    trainingInfo.status = \"Test\";\n    this.setState({trainingInfo: trainingInfo});\n\n    // then evaluate the model\n    const [xs, ys] = data.getTestData();\n    const result = model.evaluate(xs, ys);\n    const testAccuracy = result[1].as1D().dataSync()[0];\n    trainingInfo.testAccuracy = testAccuracy;\n    trainingInfo.status = \"Edit\";\n    trainingInfo.progress = 0;\n    this.setState({trainingInfo: trainingInfo});\n  }\n\n  cancelTrain() {\n    /* cancel the training session */\n    let trainingInfo = this.state.trainingInfo;\n    trainingInfo['status'] = \"Edit\";\n    this.setState({trainingInfo:trainingInfo});\n  }\n\n  loadModel(link, setError) {\n    /* load a stored model from a model's link */\n\n    // get model ID\n    getIDFromLink(link).then(modelID => {\n      // then get the model itself given the ID\n      getModel(modelID).then(modelJSON => {\n        const decoded = JSON.parse(modelJSON);\n        let modelInfo = this.state.modelInfo;\n        this.setState({\n          modelInfo: modelInfo,\n          models: decoded['model'],\n          // find the largest index\n          nextID: Math.max(...Object.keys(decoded['model']).map(key => Number(key)))+1,\n          selectModelPage: false,\n        });\n        setError(null);\n      }).catch(err => {\n        setError(err.message);\n      })\n    }).catch(err => {\n      setError(err.message);\n    });\n  }\n\n  loadDefaultModel(name) {\n    /* load one of the preset default models */\n    let model = null;\n    switch (name) {\n      case \"blank\":\n        model = blankModel;\n        break;\n      case \"dense\":\n        model = denseModel;\n        break;\n      case \"conv\":\n        model = convModel;\n        break;\n      default:\n        return;\n    }\n    this.setState({\n      nextID: Math.max(...Object.keys(model['model']).map(key => Number(key)))+1,\n      models: model['model'],\n      modelInfo: model['modelInfo'],\n      selectModelPage: false,\n    });\n\n  }\n\n  getLink() {\n    /* get a link for the current model */\n    const models = this.updateDependents(this.state.models);\n    this.setState({\n      models: models,\n    })\n    const serializedModel = JSON.stringify({\n      modelJSON: JSON.stringify({model: models, modelInfo: this.state.modelInfo}),\n    });\n    \n    // save the model first then get a link\n    saveModel(serializedModel).then(responseJSON => {\n      generateLink(responseJSON[\"data\"][\"id\"]).then( responseJSON => {\n        const link = responseJSON['data']['link'];\n        this.setState({\n          link: link,\n          linkPage: true,\n        });\n      }).catch(err => {\n        this.setError(err.message, true);\n      });\n    }).catch(err => {\n      this.setError(err.message, true);\n    });\n    \n  }\n\n  async downloadModel() {\n    /* download the current model */\n\n    // first update dependent to make sure things are right\n    const models = this.updateDependents(this.state.models);\n    this.setState({\n      models: models,\n    })\n\n    // check if model is well-formed\n    const resp = isTrainable(models);\n    if (!resp[\"ok\"]) {\n      this.setError(resp[\"err\"], true);\n      return;\n    }\n\n    // compile the model\n    const model = compileModel(models, this.state.modelInfo);\n    await model.save(\"downloads://tfjs-model\");\n  }\n\n  loadDefaultInput(name) {\n    /* load an input dataset that is preset */\n    \n    let models = this.state.models;\n    // set the parameters of the current model\n    models[0]['parameters']['data'] = name;\n    models[0]['parameters']['inputShape'] = DATASET_SHAPE[name].input;\n    models[1]['parameters']['outputShape'] = DATASET_SHAPE[name].output;\n\n    let modelInfo = this.state.modelInfo;\n    if (name === \"IMDB\")\n      modelInfo['maxToken'] = 1000;\n    this.setState({\n      // update dependent to make shapes correct\n      models: this.updateDependents(models), \n      settingInput: false,\n      modelInfo: modelInfo,\n    });\n  }\n\n  loadCustomInput(url, name, inputShape, outputShape, setError) {\n    /* load a user custom input set */\n\n    // make sure all the inputs are reasonable\n    if (inputShape.length === 0 || outputShape.length === 0) {\n      setError(\"Input and output shapes must be set\");\n      return;\n    }\n    if (name === null) {\n      setError(\"Name your dataset!\");\n      return;\n    }\n\n    // load the input from server\n    loadInput(url, name, inputShape, outputShape).catch(e => {\n      setError(e.message);\n      return;\n    }).then(data => {\n      let models = this.state.models;\n      // store them into the current model\n      models[0].parameters['data'] = data.datasetName;\n      models[0].parameters['inputShape'] = JSON.parse(data.inputShape);\n      models[0].parameters['datasetID'] = data.datasetID;\n      models[1].parameters['data'] = data.datasetName;\n      models[1].parameters['outputShape'] = JSON.parse(data.outputShape);\n      // keep shapes correct\n      models = this.updateDependents(models);\n\n      this.setState({\n        models: models,\n        settingInput: false,\n      });\n    });\n  }\n\n  setInput() {\n    /* bring up the setting input page */\n    this.setState({\n      settingInput: true,\n    });\n  }\n\n  trainSetup() {\n    /* bring up the train setup page */\n    this.setState({\n      trainSetup: true,\n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <LinkPage display={this.state.linkPage} link={this.state.link} toggle={()=>this.setState({linkPage: false})}/>\n        <SelectModel display={this.state.selectModelPage} loadModel={this.loadModel} loadDefaultModel={this.loadDefaultModel} toggle={()=>this.setState({selectModelPage: false})}></SelectModel>\n        <SetInput display={this.state.settingInput} loadDefaultInput={this.loadDefaultInput} loadInput={this.loadCustomInput} toggle={()=>{this.setState({settingInput: false})}}></SetInput>\n        <TrainSetup display={this.state.trainSetup} toggle={()=>this.setState({trainSetup: false})} modelInfo={this.state.modelInfo} update={this.updateModelInfo}></TrainSetup>\n        <ErrorBox errorMsg={this.state.errorMsg} dismissible={this.state.errorOnce} setError={this.setError}/>\n        <div className=\"container-fluid d-flex h-100 flex-row no-margin\">\n          <Sidebar models={this.state.models} selected={this.state.selected} trainingInfo={this.state.trainingInfo} newModel={this.newModel} setError={this.setError} update={this.updateModel} setSelectModelPage={() => this.setState({selectModelPage:true})} trainCloud={this.trainCloud} cancelTrain={this.cancelTrain} getLink={this.getLink} downloadModel={this.downloadModel} setInput={this.setInput}/>\n          <div className=\"d-flex w-100 p-2 flex-column flex-grow-1 no-margin\" ref=\"canvasContainer\">\n            <CanvasContainer models={this.state.models} selected={this.state.selected} select={this.selectModel} update={this.updateModel} remove={this.removeModel} editableSelected={this.state.editableSelected}/>\n            <Toolbar trainSetup={this.trainSetup} modelInfo={this.state.modelInfo} setInputDataset={this.setInput} trainingInfo={this.state.trainingInfo} updateModelInfo={this.updateModelInfo} selected={this.state.selected} models={this.state.models} update={(name, value, canTuple, floatOkay=false) => this.updateParameters(this.state.selected, name, value, canTuple, floatOkay)} setEditableSelected={this.setEditableSelected}/>\n          </div>\n          \n        </div>\n      </React.Fragment>\n      \n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"./index.css\";\n\n// the main page being loaded here: entry point\n// for the app\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}